Thu Apr 25 10:36:38 EDT 2019
MP, ST LD
Using Device: Tesla K40c
Driver Version: 410.48
using chip config: Tesla K40c
FLAGS: -D X_Y_STRIDE=32 -D ID_SHUFFLE=1 -D BARRIER=1 -D MEM_STRESS=1 -D STRESS_ITERATIONS=512  -DNVIDIA 
<kernel>:34:1: warning: '__forceinline' attribute ignored
__forceinline void atomic_store_explicit(__global volatile atomic_int* target, int val, const memory_order mo, const memory_scope ms) {
^
<kernel>:42:1: warning: '__forceinline' attribute ignored
__forceinline int atomic_load_explicit(__global volatile atomic_int* target, const memory_order mo, const memory_scope ms) {
^
<kernel>:127:20: warning: passing '__global atomic_uint *' (aka 'volatile __global unsigned int *') to parameter of type '__global atomic_int *' (aka 'volatile __global int *') converts between pointers to integer types with different sign
      test_barrier(&(ga[3]),2);
                   ^~~~~~~~
<kernel>:68:42: note: passing argument to parameter 'x' here
  void test_barrier(__global atomic_int *x, int num_threads) {
                                         ^
<kernel>:129:39: warning: passing '__global atomic_uint *' (aka 'volatile __global unsigned int *') to parameter of type 'volatile __global atomic_int *' (aka 'volatile __global int *') converts between pointers to integer types with different sign
      int tmp1 = atomic_load_explicit(&ga[y_loc], memory_order_relaxed, memory_scope_device);
                                      ^~~~~~~~~~
<kernel>:42:70: note: passing argument to parameter 'target' here
__forceinline int atomic_load_explicit(__global volatile atomic_int* target, const memory_order mo, const memory_scope ms) {
                                                                     ^
<kernel>:130:39: warning: passing '__global atomic_uint *' (aka 'volatile __global unsigned int *') to parameter of type 'volatile __global atomic_int *' (aka 'volatile __global int *') converts between pointers to integer types with different sign
      int tmp2 = atomic_load_explicit(&ga[x_loc], memory_order_relaxed, memory_scope_device);
                                      ^~~~~~~~~~
<kernel>:42:70: note: passing argument to parameter 'target' here
__forceinline int atomic_load_explicit(__global volatile atomic_int* target, const memory_order mo, const memory_scope ms) {
                                                                     ^
<kernel>:135:20: warning: passing '__global atomic_uint *' (aka 'volatile __global unsigned int *') to parameter of type '__global atomic_int *' (aka 'volatile __global int *') converts between pointers to integer types with different sign
      test_barrier(&(ga[3]), 2);
                   ^~~~~~~~
<kernel>:68:42: note: passing argument to parameter 'x' here
  void test_barrier(__global atomic_int *x, int num_threads) {
                                         ^
<kernel>:137:29: warning: passing '__global atomic_uint *' (aka 'volatile __global unsigned int *') to parameter of type 'volatile __global atomic_int *' (aka 'volatile __global int *') converts between pointers to integer types with different sign
      atomic_store_explicit(&ga[x_loc], 1, memory_order_relaxed, memory_scope_device);
                            ^~~~~~~~~~
<kernel>:34:72: note: passing argument to parameter 'target' here
__forceinline void atomic_store_explicit(__global volatile atomic_int* target, int val, const memory_order mo, const memory_scope ms) {
                                                                       ^
<kernel>:138:29: warning: passing '__global atomic_uint *' (aka 'volatile __global unsigned int *') to parameter of type 'volatile __global atomic_int *' (aka 'volatile __global int *') converts between pointers to integer types with different sign
      atomic_store_explicit(&ga[y_loc], 1, memory_order_relaxed, memory_scope_device);
                            ^~~~~~~~~~
<kernel>:34:72: note: passing argument to parameter 'target' here
__forceinline void atomic_store_explicit(__global volatile atomic_int* target, int val, const memory_order mo, const memory_scope ms) {
                                                                       ^
<kernel>:166:13: error: use of undeclared identifier 'scratch_loaction'; did you mean 'scratch_location'?
        scratchpad[scratch_loaction] = i;
                   ^~~~~~~~~~~~~~~~
                   scratch_location
<kernel>:116:7: note: 'scratch_location' declared here
  int scratch_location, // increment by 2
      ^

/home/jak4/iws19/OpenCLLitmus_v_2/litmus_driver.cpp:333: error (-11)
MP, ST ST
Using Device: Tesla K40c
Driver Version: 410.48
using chip config: Tesla K40c
FLAGS: -D X_Y_STRIDE=32 -D STRESS_PATTERN=0 -D ID_SHUFFLE=1 -D BARRIER=1 -D MEM_STRESS=1 -D STRESS_ITERATIONS=512  -DNVIDIA 
<kernel>:34:1: warning: '__forceinline' attribute ignored
__forceinline void atomic_store_explicit(__global volatile atomic_int* target, int val, const memory_order mo, const memory_scope ms) {
^
<kernel>:42:1: warning: '__forceinline' attribute ignored
__forceinline int atomic_load_explicit(__global volatile atomic_int* target, const memory_order mo, const memory_scope ms) {
^
<kernel>:127:20: warning: passing '__global atomic_uint *' (aka 'volatile __global unsigned int *') to parameter of type '__global atomic_int *' (aka 'volatile __global int *') converts between pointers to integer types with different sign
      test_barrier(&(ga[3]),2);
                   ^~~~~~~~
<kernel>:68:42: note: passing argument to parameter 'x' here
  void test_barrier(__global atomic_int *x, int num_threads) {
                                         ^
<kernel>:129:39: warning: passing '__global atomic_uint *' (aka 'volatile __global unsigned int *') to parameter of type 'volatile __global atomic_int *' (aka 'volatile __global int *') converts between pointers to integer types with different sign
      int tmp1 = atomic_load_explicit(&ga[y_loc], memory_order_relaxed, memory_scope_device);
                                      ^~~~~~~~~~
<kernel>:42:70: note: passing argument to parameter 'target' here
__forceinline int atomic_load_explicit(__global volatile atomic_int* target, const memory_order mo, const memory_scope ms) {
                                                                     ^
<kernel>:130:39: warning: passing '__global atomic_uint *' (aka 'volatile __global unsigned int *') to parameter of type 'volatile __global atomic_int *' (aka 'volatile __global int *') converts between pointers to integer types with different sign
      int tmp2 = atomic_load_explicit(&ga[x_loc], memory_order_relaxed, memory_scope_device);
                                      ^~~~~~~~~~
<kernel>:42:70: note: passing argument to parameter 'target' here
__forceinline int atomic_load_explicit(__global volatile atomic_int* target, const memory_order mo, const memory_scope ms) {
                                                                     ^
<kernel>:135:20: warning: passing '__global atomic_uint *' (aka 'volatile __global unsigned int *') to parameter of type '__global atomic_int *' (aka 'volatile __global int *') converts between pointers to integer types with different sign
      test_barrier(&(ga[3]), 2);
                   ^~~~~~~~
<kernel>:68:42: note: passing argument to parameter 'x' here
  void test_barrier(__global atomic_int *x, int num_threads) {
                                         ^
<kernel>:137:29: warning: passing '__global atomic_uint *' (aka 'volatile __global unsigned int *') to parameter of type 'volatile __global atomic_int *' (aka 'volatile __global int *') converts between pointers to integer types with different sign
      atomic_store_explicit(&ga[x_loc], 1, memory_order_relaxed, memory_scope_device);
                            ^~~~~~~~~~
<kernel>:34:72: note: passing argument to parameter 'target' here
__forceinline void atomic_store_explicit(__global volatile atomic_int* target, int val, const memory_order mo, const memory_scope ms) {
                                                                       ^
<kernel>:138:29: warning: passing '__global atomic_uint *' (aka 'volatile __global unsigned int *') to parameter of type 'volatile __global atomic_int *' (aka 'volatile __global int *') converts between pointers to integer types with different sign
      atomic_store_explicit(&ga[y_loc], 1, memory_order_relaxed, memory_scope_device);
                            ^~~~~~~~~~
<kernel>:34:72: note: passing argument to parameter 'target' here
__forceinline void atomic_store_explicit(__global volatile atomic_int* target, int val, const memory_order mo, const memory_scope ms) {
                                                                       ^
<kernel>:166:13: error: use of undeclared identifier 'scratch_loaction'; did you mean 'scratch_location'?
        scratchpad[scratch_loaction] = i;
                   ^~~~~~~~~~~~~~~~
                   scratch_location
<kernel>:116:7: note: 'scratch_location' declared here
  int scratch_location, // increment by 2
      ^

/home/jak4/iws19/OpenCLLitmus_v_2/litmus_driver.cpp:333: error (-11)
MP, LD LD
Using Device: Tesla K40c
Driver Version: 410.48
using chip config: Tesla K40c
FLAGS: -D X_Y_STRIDE=32 -D STRESS_PATTERN=1 -D ID_SHUFFLE=1 -D BARRIER=1 -D MEM_STRESS=1 -D STRESS_ITERATIONS=512  -DNVIDIA 
<kernel>:34:1: warning: '__forceinline' attribute ignored
__forceinline void atomic_store_explicit(__global volatile atomic_int* target, int val, const memory_order mo, const memory_scope ms) {
^
<kernel>:42:1: warning: '__forceinline' attribute ignored
__forceinline int atomic_load_explicit(__global volatile atomic_int* target, const memory_order mo, const memory_scope ms) {
^
<kernel>:127:20: warning: passing '__global atomic_uint *' (aka 'volatile __global unsigned int *') to parameter of type '__global atomic_int *' (aka 'volatile __global int *') converts between pointers to integer types with different sign
      test_barrier(&(ga[3]),2);
                   ^~~~~~~~
<kernel>:68:42: note: passing argument to parameter 'x' here
  void test_barrier(__global atomic_int *x, int num_threads) {
                                         ^
<kernel>:129:39: warning: passing '__global atomic_uint *' (aka 'volatile __global unsigned int *') to parameter of type 'volatile __global atomic_int *' (aka 'volatile __global int *') converts between pointers to integer types with different sign
      int tmp1 = atomic_load_explicit(&ga[y_loc], memory_order_relaxed, memory_scope_device);
                                      ^~~~~~~~~~
<kernel>:42:70: note: passing argument to parameter 'target' here
__forceinline int atomic_load_explicit(__global volatile atomic_int* target, const memory_order mo, const memory_scope ms) {
                                                                     ^
<kernel>:130:39: warning: passing '__global atomic_uint *' (aka 'volatile __global unsigned int *') to parameter of type 'volatile __global atomic_int *' (aka 'volatile __global int *') converts between pointers to integer types with different sign
      int tmp2 = atomic_load_explicit(&ga[x_loc], memory_order_relaxed, memory_scope_device);
                                      ^~~~~~~~~~
<kernel>:42:70: note: passing argument to parameter 'target' here
__forceinline int atomic_load_explicit(__global volatile atomic_int* target, const memory_order mo, const memory_scope ms) {
                                                                     ^
<kernel>:135:20: warning: passing '__global atomic_uint *' (aka 'volatile __global unsigned int *') to parameter of type '__global atomic_int *' (aka 'volatile __global int *') converts between pointers to integer types with different sign
      test_barrier(&(ga[3]), 2);
                   ^~~~~~~~
<kernel>:68:42: note: passing argument to parameter 'x' here
  void test_barrier(__global atomic_int *x, int num_threads) {
                                         ^
<kernel>:137:29: warning: passing '__global atomic_uint *' (aka 'volatile __global unsigned int *') to parameter of type 'volatile __global atomic_int *' (aka 'volatile __global int *') converts between pointers to integer types with different sign
      atomic_store_explicit(&ga[x_loc], 1, memory_order_relaxed, memory_scope_device);
                            ^~~~~~~~~~
<kernel>:34:72: note: passing argument to parameter 'target' here
__forceinline void atomic_store_explicit(__global volatile atomic_int* target, int val, const memory_order mo, const memory_scope ms) {
                                                                       ^
<kernel>:138:29: warning: passing '__global atomic_uint *' (aka 'volatile __global unsigned int *') to parameter of type 'volatile __global atomic_int *' (aka 'volatile __global int *') converts between pointers to integer types with different sign
      atomic_store_explicit(&ga[y_loc], 1, memory_order_relaxed, memory_scope_device);
                            ^~~~~~~~~~
<kernel>:34:72: note: passing argument to parameter 'target' here
__forceinline void atomic_store_explicit(__global volatile atomic_int* target, int val, const memory_order mo, const memory_scope ms) {
                                                                       ^
<kernel>:166:13: error: use of undeclared identifier 'scratch_loaction'; did you mean 'scratch_location'?
        scratchpad[scratch_loaction] = i;
                   ^~~~~~~~~~~~~~~~
                   scratch_location
<kernel>:116:7: note: 'scratch_location' declared here
  int scratch_location, // increment by 2
      ^

/home/jak4/iws19/OpenCLLitmus_v_2/litmus_driver.cpp:333: error (-11)
MP, LD ST
Using Device: Tesla K40c
Driver Version: 410.48
using chip config: Tesla K40c
FLAGS: -D X_Y_STRIDE=32 -D STRESS_PATTERN=2 -D ID_SHUFFLE=1 -D BARRIER=1 -D MEM_STRESS=1 -D STRESS_ITERATIONS=512  -DNVIDIA 
<kernel>:34:1: warning: '__forceinline' attribute ignored
__forceinline void atomic_store_explicit(__global volatile atomic_int* target, int val, const memory_order mo, const memory_scope ms) {
^
<kernel>:42:1: warning: '__forceinline' attribute ignored
__forceinline int atomic_load_explicit(__global volatile atomic_int* target, const memory_order mo, const memory_scope ms) {
^
<kernel>:127:20: warning: passing '__global atomic_uint *' (aka 'volatile __global unsigned int *') to parameter of type '__global atomic_int *' (aka 'volatile __global int *') converts between pointers to integer types with different sign
      test_barrier(&(ga[3]),2);
                   ^~~~~~~~
<kernel>:68:42: note: passing argument to parameter 'x' here
  void test_barrier(__global atomic_int *x, int num_threads) {
                                         ^
<kernel>:129:39: warning: passing '__global atomic_uint *' (aka 'volatile __global unsigned int *') to parameter of type 'volatile __global atomic_int *' (aka 'volatile __global int *') converts between pointers to integer types with different sign
      int tmp1 = atomic_load_explicit(&ga[y_loc], memory_order_relaxed, memory_scope_device);
                                      ^~~~~~~~~~
<kernel>:42:70: note: passing argument to parameter 'target' here
__forceinline int atomic_load_explicit(__global volatile atomic_int* target, const memory_order mo, const memory_scope ms) {
                                                                     ^
<kernel>:130:39: warning: passing '__global atomic_uint *' (aka 'volatile __global unsigned int *') to parameter of type 'volatile __global atomic_int *' (aka 'volatile __global int *') converts between pointers to integer types with different sign
      int tmp2 = atomic_load_explicit(&ga[x_loc], memory_order_relaxed, memory_scope_device);
                                      ^~~~~~~~~~
<kernel>:42:70: note: passing argument to parameter 'target' here
__forceinline int atomic_load_explicit(__global volatile atomic_int* target, const memory_order mo, const memory_scope ms) {
                                                                     ^
<kernel>:135:20: warning: passing '__global atomic_uint *' (aka 'volatile __global unsigned int *') to parameter of type '__global atomic_int *' (aka 'volatile __global int *') converts between pointers to integer types with different sign
      test_barrier(&(ga[3]), 2);
                   ^~~~~~~~
<kernel>:68:42: note: passing argument to parameter 'x' here
  void test_barrier(__global atomic_int *x, int num_threads) {
                                         ^
<kernel>:137:29: warning: passing '__global atomic_uint *' (aka 'volatile __global unsigned int *') to parameter of type 'volatile __global atomic_int *' (aka 'volatile __global int *') converts between pointers to integer types with different sign
      atomic_store_explicit(&ga[x_loc], 1, memory_order_relaxed, memory_scope_device);
                            ^~~~~~~~~~
<kernel>:34:72: note: passing argument to parameter 'target' here
__forceinline void atomic_store_explicit(__global volatile atomic_int* target, int val, const memory_order mo, const memory_scope ms) {
                                                                       ^
<kernel>:138:29: warning: passing '__global atomic_uint *' (aka 'volatile __global unsigned int *') to parameter of type 'volatile __global atomic_int *' (aka 'volatile __global int *') converts between pointers to integer types with different sign
      atomic_store_explicit(&ga[y_loc], 1, memory_order_relaxed, memory_scope_device);
                            ^~~~~~~~~~
<kernel>:34:72: note: passing argument to parameter 'target' here
__forceinline void atomic_store_explicit(__global volatile atomic_int* target, int val, const memory_order mo, const memory_scope ms) {
                                                                       ^
<kernel>:166:13: error: use of undeclared identifier 'scratch_loaction'; did you mean 'scratch_location'?
        scratchpad[scratch_loaction] = i;
                   ^~~~~~~~~~~~~~~~
                   scratch_location
<kernel>:116:7: note: 'scratch_location' declared here
  int scratch_location, // increment by 2
      ^

/home/jak4/iws19/OpenCLLitmus_v_2/litmus_driver.cpp:333: error (-11)
